{"version":3,"sources":["components/HeadBar/HeadBar.tsx","components/HeadBar/index.ts","components/DrawerSlide/DrawerSlide.tsx","components/DrawerSlide/index.ts","components/DialogSlide/DialogSlide.tsx","components/DialogSlide/index.ts","components/LeafletMap/LeafletMap.tsx","components/LeafletMap/index.ts","components/PieChart/PieChart.tsx","components/PieChart/index.ts","App.tsx","serviceWorker.ts","reducer/index.ts","index.tsx"],"names":["HeadBar","props","drawerOpen","setDrawerOpen","dialogOpen","setDialogOpen","height","Root","styled","div","classes","makeStyles","theme","createStyles","appBar","toolBar","margin","top","position","transform","iconButton","marginRight","spacing","title","flexGrow","useStyles","AppBar","className","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","Dragger","DrawerSlide","React","useState","drawerWidth","setDrawerWidth","open","setOpen","style","children","maxDrawerWidth","window","innerWidth","drawer","flexShrink","drawerPaper","width","backgroundSize","handleMouseUp","document","removeEventListener","handleMouseMove","useCallback","e","newWidth","clientX","body","offsetLeft","Drawer","anchor","onClose","paper","onMouseDown","addEventListener","Transition","forwardRef","ref","Slide","direction","DialogSlide","dispatch","useDispatch","Date","setMonth","getMonth","startDate","setStartDate","endDate","setEndDate","fetchData","a","axios","get","params","create_time_S","create_time_E","then","response","type","payload","data","handleClose","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","utils","DateFnsUtils","Grid","container","justify","alignItems","disableToolbar","value","format","label","onChange","date","KeyboardButtonProps","DialogActions","Button","CustomMap","Map","LeafletMap","markers","useSelector","state","geoJsonRef","useRef","mapRef","highlightFeature","target","setStyle","weight","dashArray","fillOpacity","resetHighlight","current","leafletElement","resetStyle","zoomToFeature","fitBounds","getBounds","center","zoom","TileLayer","attribution","url","GeoJSON","onEachFeature","feature","layer","on","mouseover","mouseout","click","map","prop","key","service","location","Marker","Popup","getMarker","Chart","PieChart","chartData","useEffect","am4core","am4themes_material","am4themes_animated","chart","am4charts","hiddenState","properties","opacity","legend","series","push","dataFields","category","init","App","fetchingData","toISOString","substring","resize","backgroundColor","overflow","Boolean","hostname","match","setMarker","substr","orderId","setChartData","city","cityData","find","reducer","action","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c28ebf1.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar, Typography, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport styled from \"@emotion/styled\";\n\nconst HeadBar = (props) => {\n  const {\n    drawerOpen,\n    setDrawerOpen,\n    dialogOpen,\n    setDialogOpen,\n    height,\n  } = props;\n\n  const defaultHeight = 50;\n\n  const Root = styled.div`\n    border: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    flex-grow: 1;\n    height: ${height || defaultHeight}px;\n  `;\n\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      appBar: {\n        height: height || defaultHeight,\n      },\n      toolBar: {\n        margin: 0,\n        top: \"50%\",\n        position: \"absolute\",\n        transform: \"translateY(-50%)\",\n      },\n      iconButton: {\n        marginRight: theme.spacing(2),\n      },\n      title: {\n        flexGrow: 1,\n      },\n    })\n  );\n\n  const classes = useStyles();\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen);\n  };\n\n  return (\n    <Root>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar className={classes.toolBar}>\n          <IconButton\n            edge=\"start\"\n            className={classes.iconButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleDialog}\n          >\n            <SearchIcon />\n          </IconButton>\n          <IconButton\n            edge=\"start\"\n            className={classes.iconButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleDrawer}\n          >\n            <AssessmentIcon />\n          </IconButton>\n          <Typography variant=\"h5\" color=\"inherit\" className={classes.title}>\n            Rescue\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </Root>\n  );\n};\n\nexport default HeadBar;\n","import HeadBar from \"./HeadBar\";\n\nexport default HeadBar;\n","import React, { useCallback } from \"react\";\nimport { Drawer } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport styled from \"@emotion/styled\";\n\nconst Dragger = styled.div`\n  width: 3px;\n  cursor: ew-resize;\n  padding: 4px 0 0;\n  border-top: 1px solid #ddd;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 100;\n  background-color: #033bb7;\n`;\n\nconst DrawerSlide = (props) => {\n  const [drawerWidth, setDrawerWidth] = React.useState(300);\n\n  const { open, setOpen, style, children } = props;\n\n  const minDrawerWidth = 300,\n    maxDrawerWidth = window.innerWidth / 2;\n\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      drawer: {\n        ...style,\n        flexShrink: 0,\n      },\n      drawerPaper: {\n        ...style,\n        width: open ? drawerWidth : 0,\n        backgroundSize: \"cover\",\n      },\n    })\n  );\n\n  const classes = useStyles();\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleMouseDown = (e) => {\n    document.addEventListener(\"mouseup\", handleMouseUp, true);\n    document.addEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener(\"mouseup\", handleMouseUp, true);\n    document.removeEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseMove = useCallback(\n    (e) => {\n      const newWidth = e.clientX - document.body.offsetLeft;\n      if (newWidth >= minDrawerWidth && newWidth <= maxDrawerWidth) {\n        setDrawerWidth(newWidth);\n      }\n    },\n    [maxDrawerWidth]\n  );\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"persistent\"\n      anchor=\"left\"\n      open={open}\n      onClose={handleClose}\n      classes={{ paper: classes.drawerPaper }}\n    >\n      {children}\n      <Dragger onMouseDown={(e) => handleMouseDown(e)} />\n    </Drawer>\n  );\n};\n\nexport default DrawerSlide;\n","import DrawerSlide from \"./DrawerSlide\";\n\nexport default DrawerSlide;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Slide,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport axios from \"axios\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst DialogSlide = (props) => {\n  const dispatch = useDispatch();\n  const { open, setOpen, title } = props;\n  const [startDate, setStartDate] = useState<Date>(\n    new Date(new Date().setMonth(new Date().getMonth() - 3))\n  );\n  const [endDate, setEndDate] = useState<Date>(new Date());\n\n  const fetchData = async () => {\n    axios\n      .get(\n        \"https://gw.openapi.org.tw/bba1fd90-6423-11ea-9c78-6d4b75d0df63/TMS?client_id=0f978980-18c7-11eb-936f-e7de9d1d0683&client_secret=oWNVkU%2BW1PyC09PHJJjW3jXJyOy2%2BqQV5D1sARe114w%3D\",\n        {\n          params: {\n            create_time_S: startDate,\n            create_time_E: endDate,\n          },\n        }\n      )\n      .then((response) => {\n        dispatch({\n          type: \"FETCH_DATA\",\n          payload: response.data.data,\n        });\n        handleClose();\n      });\n  };\n\n  const handleStartDateChange = (date: Date) => {\n    setStartDate(date);\n  };\n\n  const handleEndDateChange = (date: Date) => {\n    setEndDate(date);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">{title}</DialogTitle>\n      <DialogContent>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid container justify=\"space-around\" alignItems=\"baseline\">\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              value={startDate}\n              format=\"yyyy/MM/dd\"\n              label=\"Start Date\"\n              onChange={handleStartDateChange}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n            <Typography variant=\"h5\">~</Typography>\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              value={endDate}\n              format=\"yyyy/MM/dd\"\n              label=\"End Date\"\n              onChange={handleEndDateChange}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </Grid>\n        </MuiPickersUtilsProvider>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={fetchData} color=\"primary\">\n          Search\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DialogSlide;\n","import DialogSlide from \"./DialogSlide\";\n\nexport default DialogSlide;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Map, TileLayer, GeoJSON, Marker, Popup } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport styled from \"@emotion/styled\";\nimport state from \"./assert/taiwanState.json\";\n\nconst CustomMap = styled(Map)`\n  height: 100%;\n`;\n\nconst LeafletMap = (props) => {\n  const markers = useSelector((state) => state.markers);\n\n  const geoJsonRef = React.useRef<GeoJSON>(null);\n\n  const mapRef = React.useRef<Map>(null);\n\n  const highlightFeature = (e) => {\n    let layer = e.target;\n\n    layer.setStyle({\n      weight: 3,\n      color: \"rgba(255,255,255,0.3)\",\n      dashArray: \"\",\n      fillOpacity: 0.7,\n    });\n  };\n\n  const resetHighlight = (e) => {\n    geoJsonRef.current!.leafletElement.resetStyle(e.target);\n  };\n\n  const zoomToFeature = (e) => {\n    mapRef.current!.leafletElement.fitBounds(e.target.getBounds());\n  };\n\n  const onEachFeature = (feature, layer) => {\n    layer.on({\n      mouseover: highlightFeature,\n      mouseout: resetHighlight,\n      click: zoomToFeature,\n    });\n  };\n\n  const getMarker = () => {\n    if (markers) {\n      return (\n        <MarkerClusterGroup>\n          {markers.map((prop, key) => {\n            const { position, service, date, location } = prop;\n            return (\n              <Marker position={position} key={key}>\n                <Popup>\n                  {\"服務項目：\" + service} <br />\n                  {\"時間：\" + date}\n                  <br />\n                  {\"地點：\" + location}\n                </Popup>\n              </Marker>\n            );\n          })}\n        </MarkerClusterGroup>\n      );\n    }\n  };\n\n  return (\n    <CustomMap\n      className=\"markercluster-map\"\n      center={[23.6, 121]}\n      zoom={8}\n      ref={mapRef}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"http://mt0.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\"\n      />\n      <GeoJSON data={state} onEachFeature={onEachFeature} ref={geoJsonRef} />\n      {getMarker()}\n    </CustomMap>\n  );\n};\n\nexport default LeafletMap;\n","import LeafletMap from \"./LeafletMap\";\n\nexport default LeafletMap;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_material from \"@amcharts/amcharts4/themes/material\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport styled from \"@emotion/styled\";\n\nconst Chart = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst PieChart = (props) => {\n  let data = useSelector((state) => state.chartData);\n\n  const init = () => {\n    am4core.useTheme(am4themes_material);\n    am4core.useTheme(am4themes_animated);\n    let chart = am4core.create(\"chartdiv\", am4charts.PieChart3D);\n    chart.hiddenState.properties.opacity = 0;\n\n    chart.legend = new am4charts.Legend();\n\n    chart.data = data;\n\n    let series = chart.series.push(new am4charts.PieSeries3D());\n    series.dataFields.value = \"value\";\n    series.dataFields.category = \"city\";\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      am4core.disposeAllCharts();\n    };\n  });\n\n  return <Chart id=\"chartdiv\" />;\n};\n\nexport default PieChart;\n","import PieChart from \"./PieChart\";\n\nexport default PieChart;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport HeadBar from \"./components/HeadBar\";\nimport DrawerSlide from \"./components/DrawerSlide\";\nimport DialogSlide from \"./components/DialogSlide\";\nimport LeafletMap from \"./components/LeafletMap\";\nimport PieChart from \"./components/PieChart\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst headBarHeight = 50;\n\nconst App = () => {\n  let dispatch = useDispatch();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const fetchData = useCallback(\n    (startDate, endDate) => {\n      const fetchingData = async (startDate, endDate) => {\n        axios\n          .get(\n            \"https://gw.openapi.org.tw/bba1fd90-6423-11ea-9c78-6d4b75d0df63/TMS?client_id=0f978980-18c7-11eb-936f-e7de9d1d0683&client_secret=oWNVkU%2BW1PyC09PHJJjW3jXJyOy2%2BqQV5D1sARe114w%3D\",\n            {\n              params: {\n                create_time_S: startDate,\n                create_time_E: endDate,\n              },\n            }\n          )\n          .then((response) => {\n            dispatch({\n              type: \"FETCH_DATA\",\n              payload: response.data.data,\n            });\n          });\n      };\n      fetchingData(startDate, endDate);\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    let startDate = new Date();\n    startDate.setMonth(startDate.getMonth() - 3);\n    let endDate = new Date();\n    fetchData(\n      startDate.toISOString().substring(0, 10),\n      endDate.toISOString().substring(0, 10)\n    );\n  }, [fetchData]);\n\n  const Root = styled.div`\n    position: absolute;\n    height: 100vh;\n    width: 100vw;\n  `;\n\n  const Map = styled.div`\n    position: relative;\n    top: ${headBarHeight}px;\n    height: calc(100vh - ${headBarHeight}px);\n  `;\n\n  return (\n    <Root>\n      <HeadBar\n        drawerOpen={drawerOpen}\n        setDrawerOpen={setDrawerOpen}\n        dialogOpen={dialogOpen}\n        setDialogOpen={setDialogOpen}\n        height={headBarHeight}\n      />\n      <DialogSlide\n        open={dialogOpen}\n        setOpen={setDialogOpen}\n        title={\"Set Query Date\"}\n      />\n      <DrawerSlide\n        open={drawerOpen}\n        setOpen={setDrawerOpen}\n        anchor={\"left\"}\n        style={{\n          top: headBarHeight,\n          resize: \"horizontal\",\n          backgroundColor: \"#5999dad9\",\n          overflow: \"auto\",\n        }}\n      >\n        <PieChart />\n      </DrawerSlide>\n      <Map>\n        <LeafletMap />\n      </Map>\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const setMarker = (payload) => {\n  return {\n    position: [payload[\"origin_lat\"], payload[\"origin_lng\"]],\n    date: payload[\"create_time\"].substr(0, 10),\n    orderId: payload[\"order_id\"],\n    location: payload[\"origin_address\"],\n    service: payload[\"service_name\"],\n  };\n};\n\nconst setChartData = (chartData, payload) => {\n  let city = payload[\"origin_address_city\"];\n  let cityData = chartData.find((chart) => chart.city === city);\n  if (cityData) {\n    cityData.value++;\n  } else {\n    chartData.push({\n      city: city,\n      value: 1,\n    });\n  }\n};\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"FETCH_DATA\":\n      let markers = [];\n      let chartData = [];\n\n      for (let payload of action.payload) {\n        setChartData(chartData, payload);\n        markers.push(setMarker(payload));\n      }\n      return {\n        markers: markers,\n        chartData: chartData,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}